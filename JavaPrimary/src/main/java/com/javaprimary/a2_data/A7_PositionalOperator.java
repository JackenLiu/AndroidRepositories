package com.javaprimary.a2_data;

/**
 * 位运算符
 */
public class A7_PositionalOperator {

    public static void main(String[] args) {
        testLeftRightPositionalOperator();
        testPositionalOperator();
        testExclusiveOR();
    }

    // 测试左移右移位运算符
    public static void testLeftRightPositionalOperator() {
        /*
        >>>无符号右移和>>有符号右移的区别
        >>>无符号右移无论高位是0还是1,移动后都用0补位
        >>有符号右移高位是0就补0,高位是1就补1
        */
        System.out.println(-6 >> 1);            //向右移动几次就是除以2的几次幂
        System.out.println(6 << 1);            //向左移动几次就是乘以2的几次幂


        //面试题
        //请用最有效率的方式写出计算2乘以8的结果
        System.out.println(2 * 8);
        System.out.println(2 << 3);                //最有效率,直接操作的是二进制
    }

    // 测试按位运算符
    public static void testPositionalOperator() {
    /*
      110
    & 011
    ---------
      010    即2
     */
        System.out.println(6 & 3); // 输出 2

        /*
          110
        | 011
        ---------
          111    即7
         */
        System.out.println(6 | 3); // 输出 7

        /*
          110
        ^ 011
        ---------
          101    即5
         */
        System.out.println(6 ^ 3);// 输出 5

        /*
        00000000 00000000 00000000 00000110   +6的原码
        ------------------------------------  按位取反
        11111111 11111111 11111111 11111001   -7的补码 // 输出 -7
        11111111 11111111 11111111 11111000   -7的反码
        10000000 00000000 00000000 00000111   -7的原码
         */
        System.out.println(~6);// 输出 -7
    }

    // 测试按位异或运算符，不用第三方变量交换两个变量的值
    public static void testExclusiveOR() {
        int x = 10;
        int y = 5;

        x = x ^ y;        // 10 ^ 5
        y = x ^ y;        // 10 ^ 5 ^ 5 = 10
        x = x ^ y;        // 10 ^ 5 ^ 10 = 5
        System.out.println("x = " + x + ",y = " + y);
    }

    /*  【位运算符的基本用法】

    转成二进制进行运算
	• &: 按位与
		○ 有0则0

	• |: 按位或
		○ 有1则1

	• ^: 按位异或（定律：一个数异或另外一个数两次，等于它本身）
		○ 相同则0，不同则1

	• ~: 按位反码
		○ 按位取反
     */




    /*  【不用第三方变量交换两个变量的值】

	• A:案例演示
		○ 位异或运算符的特点
		○ ^ 的特点：一个数据对另一个数据位异或两次，该数本身不变。
	• B:面试题：
		○ 请自己实现两个整数变量的交换
			○ int x = 10;
			○ int y = 5;
			○ x = x ^ y;  // 10 ^ 5
			○ y = x ^ y;  // 10 ^ 5 ^ 5 = 10
			○ x = x ^ y;  // 10 ^ 5 ^ 10 = 5
     */




    /*  【左移右移位运算符】

	• >>,>>>,<<（运算效率高）的用法:
		○ <<: 左移
			○ 左边最高位丢弃，右边补齐0
			○ 5 << 2 = 5 * 4

		○ >>: 右移
			○ 最高位是0，左边补齐0;最高为是1，左边补齐1
			○ 11 >> 2 = 0000 0000 0000 0000 0000 0000 0000 1011 >> 2
				      = 0000 0000 0000 0000 0000 0000 0000 0010
				      = 3
		○ >>>:
			○ 无符号右移 无论最高位是0还是1，左边补齐0

	• 例子：
		1.用位移运算符来实现  i / 100
		 　　 　　100 = 64 + 32 + 4
		 　　 　　所以对i / 100可以这样来表示： ( i << 6 ) + ( i << ５) + ( i << 2 )
		2.写出( q << 3 ) + ( q << 1 )实现的代码
		 　　 　　原式 = q * 2 ^ 3 + q * 2 ^ 1 = q * ( 8 + 2) = q * 10
		3.最高效率计算 2*8
                 2  << 3
     */
}
