package com.javaprimary.a2_data;

/**
 * 补码
 * 计算机计算二进制以8个bit为单位，正数和负数进行计算，正数使用原码，负数使用补码，反码相当于计算媒介。
 */
public class A3_Complement {

    public static void main(String[] args) {
        /*
        【自动类型提升(隐式转换)】
         */
        int i = 300;
        byte b = 50;
        i = i + b;
        System.out.println(i); // 输出 int 类型

        /*
        【强转得到错误结果】
         */
        testDataTypeAutoUpdate();
    }

    //  【方法】补码展示数据类型类型提升，得到错误结果
    public static void testDataTypeAutoUpdate() {

        /*
        【强制类型转换】
         */
        int i1 = 100;
        byte b1 = 50;
        b1 = (byte) (i1 + b1); //此处应该输出 150 ？
        // 转换过程

        //00000000 00000000 00000000 10010110   int类型的150
        //10010110								用byte强转150后的结果

        //0 1101010								106
        //1 1101010								-106的原码
        //1 0010101								-106的反码
        //0 0000001                             +1
        //1 0010110								-106的补码，即结果是 -106
        System.out.println(b1); // 输出 -106



        /*
        【300的4个字节 int 类型转1个字节的 byte 类型 】
         */
        byte b2 = (byte) 300;
        System.out.println(b2); // 输出 44
        // 转换过程

        //00000000 00000000 00000001 00101100   int 类型300 的二进制表现形式
        //00101100（结果是44）
    }


    /*  【原码反码补码】

	• A:为什么要讲解有符号数据表示法
		○ 后面学习数据类型的时候,要学习强制类型转换,如果不知道有原反补会看不懂结果

	• B:有符号数据表示法的几种方式
		○ 原码
			§ 就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。
			§ 通过一个字节,也就是8个二进制位表示+7 和-7
			§ 0(符号位) 0000111
			§ 1(符号位) 0000111
		○ 反码
			§ 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。
		○ 补码
			§ 正数的补码与其原码相同；负数的补码是在其反码的末位加1。
     */





    /*  【数据类型提升，long 与float 的取值范围大小比较】

    • 进行混合运算的时候,byte,short,char 不会相互转换,都会自动类型提升为 int 类型,其他类型进行混合运算的是小的数
      据类型提升为大的
		○ byte,short,char --> int --> long --> float --> double

	• 其中 long 占8个字节，float 占4个字节，但是float 表示的数据范围比long 的范围要大。为什么 ？

		○ 它们底层的存储结构不同。因为 float 的定义使用 IEEE754 二进制浮点数算术标准
			§ 4个字节是32个二进制位
			§ 1位是符号位
			§ 8位是指数位
			§ 23位是尾数位
			§ 每个指数位减去127
			§ 00000000 至  11111111
			§ 0到255
			§ 1到254
			§ -126 到127
		○ 即 float 范围为 2 的 -126 次方至 2 的127次方
	    ○ long：2^63-1
	    ○ float：3.410^38 > 210^38 > 2*8^38 = 22^3^38 = 22^114 > 2^63-1
     */
}
