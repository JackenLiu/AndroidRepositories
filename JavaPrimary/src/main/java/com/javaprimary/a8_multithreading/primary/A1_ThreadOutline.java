package com.javaprimary.a8_multithreading.primary;

/**
 * 多线程概述
 */
public class A1_ThreadOutline {

    public static void main(String[] args) {

        // 以下代码交替执行，说明主线程和垃圾回收线程是分开的，证明了 JVM 的多线程

        for (int i = 0; i < 1000000; i++) {
            new Demo();
        }

        for (int i = 0; i < 1000000; i++) {
            System.out.println("主方法执行的代码.............................");
        }
    }

    static class Demo {
        @Override
        public void finalize() {
            System.out.println("垃圾被清扫了");
        }

    }



    /* 【多线程的引入】

	• 1.什么是线程
		○ 线程是程序执行的一条路径, 一个进程中可以包含多条线程
		○ 多线程并发执行可以提高程序的效率, 可以同时完成多项工作
		○ 线程生命周期: 新线程 -> 就绪 -> 执行权 -> 运行 -> (阻塞) -> 死亡

	• 2.多线程的应用场景
		○ 红蜘蛛同时共享屏幕给多个电脑
		○ 迅雷开启多条线程一起下载
		○ QQ同时和多个人一起视频
		○ 服务器同时处理多个客户端请求
    */



    /* 【多线程并行和并发的区别】

	• 并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)
	• 并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务
	  都在运行。
	• 比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。
	• 如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。
    */




    /* 【 Java 程序运行原理和 JVM 的启动是多线程的吗】

	• A:Java程序运行原理
		○ Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个
		  “主线程” ，然后主线程去调用某个类的 testDeadLock 方法。

	• B:JVM 的启动是多线程的吗
        ○ JVM 启动至少启动了垃圾回收线程和主线程，所以是多线程的。
    */
}
